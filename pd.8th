#! /usr/bin/env 8th

needs utils/args

needs csv
needs ext
needs opts
needs pipe

\ process flags
false var, header-row

\ type words for columns
m:new var, col-types

\ array of row predicates, selected, and sorted columns
a:new var, filters
a:new var, cuts
a:new var, sort-cols

\ array of the per-row processing and collected rows
a:new var, pipeline
a:new var, rows

\ set to ( -1 * ) for reverse-order sorting
defer: sort-mult

\ conversion and compare words for column types
[ ' >s , ' s:cmp ] constant s-col
[ ' >n , ' n:cmp ] constant n-col
[ ' d:parse , ' d:cmp ] constant d-col

\ true dbg:line-info

: output-row \ a --
   "," csv:.row ;

: test \ T --
    if; drop break ;

: sort? \ -- T
    sort-cols @ a:empty? not nip ;

: cut-cols \ -- a
    cuts @ ' csv:col a:map ;

: col-type \ s -- w w
    col-types @ swap s-col m:@? nip a:open ;

: build-filter \ s x test --
    >r >r dup csv:col swap col-type

    \ convert x to the proper type and curry with the cmp
    over r> swap w:exec swap curry

    \ compose the entire word and add it to the pipeline
    r> 4 a:close pipe:new pipeline a:push! ;

: build-filters \ --
    filters @ ( a:open build-filter ) a:each! drop ;

: build-cut \ --
    cut-cols a:empty; ' csv:cut curry pipeline a:push! ;

: build-output \ --
    sort? if ( rows a:push! ) else ' output-row then pipeline a:push! ;

: sort-cmp \ s --
    dup col-type ' sort-mult pipe:|> >r >r csv:col r> pipe:|>

    \ execute the col/conv on each item then pipe to cmp
    ( >r r@ w:exec nip swap r> w:exec nip swap ) curry r> pipe:|> ;

: sort-rows \ --
    rows @ sort-cols @ ' sort-cmp a:map n-cmp a:sort ;

: cut-header \ --
    cuts @ a:empty; csv:set-header ;

: process-header \ f -- f
    header-row @ if csv:read-header then ;

: process-row \ a --
    pipeline @ ' w:exec a:each! drop ;

: process \ s --
    dup "--" s:= if drop f:stdin else csv:open null? not assert then

    \ read and maybe output header
    process-header

    \ reset and build the pipeline
    a:new pipeline ! build-filters build-cut build-output

    \ run pipeline over every row
    ' process-row csv:each f:close ;

: run \ --
    remaining-args @ ' f:glob a:map ( ' process a:each! ) a:each! ;

: sort \ --
    sort? not if; cut-header sort-rows ' output-row a:each! drop ;

: app:main \ --
    opts:parse run sort bye ;

: usage \ --
    "usage.txt" app:asset  >s . cr bye ;

with: opts
    opt: -h usage ;
    opt: --help usage ;

    \ use defined header column names instead of first row
    opt: -H true header-row ! ;

    \ field separator, select and sort columns
    opt: -f next-arg csv:sep ;
    opt: -c next-arg "," / cuts ! ;
    opt: -s next-arg "," / sort-cols ! ;

    \ set column types
    opt: -n col-types @ next-arg "," / ( n-col m:! ) a:each! 2drop ;
    opt: -d col-types @ next-arg "," / ( d-col m:! ) a:each! 2drop ;

    \ define column filters
    opt: -lt next-arg "," / ( 0 < test ) a:push filters a:push! ;
    opt: -gt next-arg "," / ( 0 > test ) a:push filters a:push! ;
    opt: -eq next-arg "," / ( 0 = test ) a:push filters a:push! ;

    \ inverse flags
    opt: -r ( -1 n:* ) w:is sort-mult ;
;with
